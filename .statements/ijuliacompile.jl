precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{getfield(Revise, Symbol("#90#91")), Module, String})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Base.PkgId}, Any, Any})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(ZeroMQ_jll.__init__)})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#CompilerABI#3#4")), Nothing, Nothing, Symbol, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(ZMQ.__init__)})
precompile(Tuple{typeof(IJulia.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Function, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Revise.add_require), String, Module, String, String, Expr})
precompile(Tuple{getfield(Plots, Symbol("#276#309"))})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Symbol, String, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Symbol, String, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.pathof), Module})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.get), Base.EnvDict, String, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, Int64, String})
precompile(Tuple{typeof(Core.Compiler.zero), Type{Int128}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ZMQ._Message}})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(ZMQ._get_fd), ZMQ.Socket})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{Type{FileWatching._FDWatcher}, Base.Libc.RawFD, Bool, Bool})
precompile(Tuple{Type{ZMQ.Socket}, ZMQ.Context, Int64})
precompile(Tuple{Type{ZMQ.Socket}, Int64})
precompile(Tuple{typeof(Base.bind), ZMQ.Socket, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, ZMQ.Socket})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, Base.ReentrantLock, ZMQ.Socket})
precompile(Tuple{typeof(IJulia.heartbeat_thread), Ptr{Nothing}})
precompile(Tuple{typeof(Base.link_pipe!), Base.PipeEndpoint, Bool, Base.PipeEndpoint, Bool})
precompile(Tuple{typeof(Base.CoreLogging.global_logger), Base.CoreLogging.SimpleLogger})
precompile(Tuple{typeof(IJulia.msg_header), IJulia.Msg, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{ZMQ.Socket, Base.ReentrantLock}, ZMQ.Socket})
precompile(Tuple{typeof(IJulia.get_log_preface)})
precompile(Tuple{typeof(ZMQ.msg_init), Int64})
precompile(Tuple{typeof(ZMQ._MessageRef), String})
precompile(Tuple{typeof(ZMQ._get_events), ZMQ.Socket})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching._FDWatcher})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching._FDWatcher})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching._FDWatcher})
precompile(Tuple{getfield(FileWatching, Symbol("##wait#1")), Bool, Bool, typeof(Base.wait), FileWatching._FDWatcher})
precompile(Tuple{typeof(ZMQ._send), ZMQ.Socket, Base.RefValue{ZMQ._Message}, Bool})
precompile(Tuple{typeof(Base.close), Base.RefValue{ZMQ._Message}})
precompile(Tuple{getfield(ZMQ, Symbol("##send#13")), Bool, typeof(Sockets.send), ZMQ.Socket, String})
precompile(Tuple{typeof(MbedTLS.mbed_err), Int32})
precompile(Tuple{typeof(Base.unsafe_write), MbedTLS.MD{true}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(IJulia.hmac), String, String, String, String})
precompile(Tuple{typeof(IJulia.send_ipython), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(IJulia.send_status), String, IJulia.Msg})
precompile(Tuple{typeof(IJulia.send_status), String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(IJulia.init), Array{String, 1}})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#2")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), Base.IOStream})
precompile(Tuple{typeof(JSON.Parser.current), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.byteat), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, UInt8}, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.StreamingParserState{Base.IOStream}, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.throw_boundserror), JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int64})
precompile(Tuple{Type{Float64}, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Parsers.roundQuotient), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{Int32}, Int128})
precompile(Tuple{typeof(Parsers.BigInt!), Base.GMP.BigInt, Int128})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.set_ui), UInt64})
precompile(Tuple{typeof(Base.GMP.MPZ.realloc2), Int64})
precompile(Tuple{Type{Base.GMP.BigInt}, Int128})
precompile(Tuple{typeof(Base.exp2), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.add_ui), Base.GMP.BigInt, UInt8})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(JSON.Parser._float_from_bytes), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}, Bool, JSON.Parser.PushVector{UInt8, Array{UInt8, 1}}, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.StreamingParserState{Base.IOStream}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.split), String, String})
precompile(Tuple{typeof(Base.:(!=)), Base.SubString{String}, String})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), Base.SubString{String}})
precompile(Tuple{typeof(Base.Unicode.uppercase), Base.SubString{String}})
precompile(Tuple{Type{MbedTLS.MD{IsHMAC} where IsHMAC}, MbedTLS.MDKind, String})
precompile(Tuple{Type{IJulia.IJuliaStdio{IO_t} where IO_t<:IO}, Base.PipeEndpoint, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.PipeEndpoint, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.redirect_stdout), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stderr), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.redirect_stdin), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.Multimedia.TextDisplay}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{Type{Base.CoreLogging.SimpleLogger}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.UUID})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.UUID, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, String}, String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Dates.DateTime, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Dates.DateTime})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Dates.DateTime}, Base.Pair{String, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.unsafe_write), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, UInt8})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x59000000)}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x6d000000)}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x64000000)}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DateTime, Dates.DateFormat{Symbol("YYYY-mm-dd\THH:MM:SS"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DatePart{Char(0x73000000)}, Dates.DateTime})
precompile(Tuple{typeof(Dates.format), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DateTime, Dates.DateFormat{Symbol("YYYY-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}})
precompile(Tuple{typeof(Base.print), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Dates.DateTime})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, String}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{Type{IJulia.InlineDisplay}})
precompile(Tuple{typeof(Base.Multimedia.pushdisplay), IJulia.InlineDisplay})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{IO}})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.revise_dir_queued), Tuple{String}}})
precompile(Tuple{Type{FileWatching.FileMonitor}, String})
precompile(Tuple{typeof(Base.preserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.start_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.unpreserve_handle), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.stop_watching), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.wait), FileWatching.FileMonitor})
precompile(Tuple{typeof(FileWatching.watch_file), String, Int64})
precompile(Tuple{getfield(Revise, Symbol("##instantiate_sigs!#71")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Revise.instantiate_sigs!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Revise.add_definitions_from_repl), String})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:filename, :extract_docexprs), Tuple{String, Bool}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#31")), String, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:extract_docexprs,), Tuple{Bool}}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("#split_expressions!##kw")), NamedTuple{(:extract_docexprs, :filename), Tuple{Bool, String}}, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Array{Any, 1}})
precompile(Tuple{getfield(JuliaInterpreter, Symbol("##split_expressions!#28")), Bool, String, typeof(JuliaInterpreter.split_expressions!), Array{Tuple{Module, Expr}, 1}, Base.Dict{Module, Array{Expr, 1}}, Expr, Module, Expr})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, String, Module})
precompile(Tuple{typeof(Revise.maybe_parse_from_cache!), Revise.PkgData, String})
precompile(Tuple{getfield(Revise, Symbol("#38#39")){String}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#38#39")){String}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{Revise.Rescheduler{typeof(Revise.watch_manifest), Tuple{String}}})
precompile(Tuple{typeof(Revise.remove_from_included_files), Symbol})
precompile(Tuple{typeof(Revise.filter_valid_cachefiles), String, Array{String, 1}})
precompile(Tuple{typeof(Revise.pkg_fileinfo), Base.PkgId})
precompile(Tuple{typeof(Revise.parse_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, String, Module})
precompile(Tuple{typeof(Revise.queue_includes!), Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.parse_pkg_files), Base.PkgId})
precompile(Tuple{typeof(Revise._watch_package), Base.PkgId})
precompile(Tuple{getfield(Revise, Symbol("#34#35")){Base.PkgId}})
precompile(Tuple{getfield(Revise, Symbol("#66#67")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Array{String, 1}}})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), getfield(Revise, Symbol("#66#67")){OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module, Array{String, 1}}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Revise.maybe_add_includes_to_pkgdata!), Revise.PkgData, String, Array{Base.Pair{Module, Array{String, 1}}, 1}})
precompile(Tuple{getfield(Revise, Symbol("#32#33")){String, Module, String, Base.PkgId}})
precompile(Tuple{typeof(IJulia.watch_stdio)})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(IJulia.push_preexecute_hook), Function})
precompile(Tuple{typeof(IJulia.waitloop)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{getfield(Base, Symbol("#wait_locked#515")), Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.readbytes!), Base.PipeEndpoint, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, String}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(IJulia.send_stream), String})
precompile(Tuple{typeof(IJulia.watch_stream), Base.PipeEndpoint, String})
precompile(Tuple{getfield(IJulia, Symbol("#22#24"))})
precompile(Tuple{typeof(IJulia.send_stdio), String})
precompile(Tuple{getfield(Base, Symbol("#504#505")){typeof(IJulia.send_stdout), Base.Timer}})
precompile(Tuple{getfield(IJulia, Symbol("#23#25"))})
precompile(Tuple{getfield(Base, Symbol("#504#505")){typeof(IJulia.send_stderr), Base.Timer}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Ptr{Nothing}, Base.InterpreterIP}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}}})
precompile(Tuple{typeof(ZMQ.msg_init)})
precompile(Tuple{typeof(ZMQ._recv!), ZMQ.Socket, Base.RefValue{ZMQ._Message}})
precompile(Tuple{typeof(ZMQ.unsafe_copy), Type{String}, Base.RefValue{ZMQ._Message}})
precompile(Tuple{typeof(Sockets.recv), ZMQ.Socket, Type{String}})
precompile(Tuple{typeof(IJulia.recv_ipython), ZMQ.Socket})
precompile(Tuple{typeof(IJulia.flush_all)})
precompile(Tuple{typeof(IJulia.eventloop), ZMQ.Socket})
precompile(Tuple{getfield(IJulia, Symbol("#14#17"))})
precompile(Tuple{getfield(IJulia, Symbol("#15#18"))})
precompile(Tuple{typeof(JSON.Parser._count_before), String, Char, Int64})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.MemoryParserState})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(Parsers.xparse), Type{Float64}, String, Int64, Int64, Parsers.Options{false, false, false, false, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}})
precompile(Tuple{typeof(IJulia.kernel_info_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.print_to_string), UInt32, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{String, String}, 1}}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{String, String}, 1}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{String, String}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.flush), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.flush), IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Int64}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(Base._replace), Base.GenericIOBuffer{Array{UInt8, 1}}, getfield(IJulia, Symbol("#37#38")), String, Base.UnitRange{Int64}, Base.RegexAndMatchData})
precompile(Tuple{typeof(Base._replace), Base.GenericIOBuffer{Array{UInt8, 1}}, getfield(IJulia, Symbol("#37#38")), String, Int64, Base.RegexAndMatchData})
precompile(Tuple{getfield(Base, Symbol("##replace#336")), Int64, typeof(Base.replace), String, Base.Pair{Base.Regex, getfield(IJulia, Symbol("#37#38"))}})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Base.Regex, getfield(IJulia, Symbol("#37#38"))}})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Base.Regex, String}})
precompile(Tuple{typeof(Revise.handle_deletions), Revise.PkgData, String})
precompile(Tuple{typeof(Revise.queue_includes), Module})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(Base.count), Base.Fix2{typeof(Base.:(==)), Char}, Base.SubString{String}})
precompile(Tuple{typeof(SoftGlobalScope.softscope_include_string), Module, String, String})
precompile(Tuple{getfield(Base.Meta, Symbol("#parse##kw")), NamedTuple{(:greedy, :raise), Tuple{Bool, Bool}}, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Expr, LineNumberNode}, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Expr, LineNumberNode}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope.add_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(SoftGlobalScope.add_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope.shift_linenum), Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(SoftGlobalScope.shift_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{Array{Any, 1}, Int64, Base.RefValue{Symbol}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Expr, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Symbol, Int64, Symbol})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope.softscope), Module, Expr})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Int64})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Function, Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope._softscope), LineNumberNode, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Type{LineNumberNode}})
precompile(Tuple{typeof(Base.setindex!), Array{LineNumberNode, 1}, LineNumberNode, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope._softscope), Expr, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Nothing}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Nothing})
precompile(Tuple{typeof(Base.Multimedia.display)})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{Base.Dict{K, V} where V where K, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{Base.Dict{K, V} where V where K, 1}}, Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Base.Dict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(IJulia.execute_request), ZMQ.Socket, IJulia.Msg})
precompile(Tuple{typeof(Base.getindex), LaTeXStrings.LaTeXString, Base.UnitRange{Int64}})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(Revise.errors), Array{Any, 1}})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(SoftGlobalScope._softscope), Tuple{Array{Any, 1}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Symbol, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Any, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.sin)}})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.LCHab{T} where T<:AbstractFloat}, ColorTypes.LCHab{Float64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, ColorTypes.Lab{Float64}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(RecipesPipeline.is3d), Type{T} where T})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Type{T} where T})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Type{T} where T})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{typeof(Base.:(|>)), Plots.Plot{Plots.GRBackend}, typeof(Base.Multimedia.display)})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Plots.Plot{Plots.GRBackend}}, Array{Any, 1}, Int64})
precompile(Tuple{Type{Base.Dict{String, Union{String, JSON.Writer.JSONText}}}})
precompile(Tuple{typeof(IJulia.display_mimestring), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String, String})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{typeof(IJulia.display_mimejson), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{String, JSON.Writer.JSONText}}, JSON.Writer.JSONText, String})
precompile(Tuple{typeof(IJulia.display_dict), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{typeof(Base.Multimedia.display), IJulia.InlineDisplay, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{getfield(Plots, Symbol("#gr_set_font##kw")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#336")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.sizeof), Plots.GRBackend})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Type{T} where T})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/plain")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#336")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/svg+xml")}})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/svg+xml")}})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("image/png")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/markdown")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.showjuno), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/html")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{typeof(Base.string), Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.Plot{Plots.GRBackend}}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Dict{Any, Any}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Dict{Any, Any}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{Any, Any}}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{Any, Any}}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Base.Dict{Any, Any}}, Type{String}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Dict{K, V} where V where K}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Dict{K, V} where V where K}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Base.Dict{K, V} where V where K}, String})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}})
precompile(Tuple{typeof(IJulia.msg_pub), IJulia.Msg, String, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{Type{IJulia.Msg}, Array{String, 1}, Base.Dict{String, Any}, Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), QuoteNode, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, QuoteNode, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), String, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Type{Expr}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope._softscope), String, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:manifest, :update_registry, :verbose), Tuple{Nothing, Bool, Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Bool}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Pkg.Types.PackageSpec, 1}, Base.Generator{Array{String, 1}, Type{Pkg.Types.PackageSpec}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, Type{Pkg.Types.PackageSpec}}})
precompile(Tuple{Type{Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, Base.Dict{String, Any}})
precompile(Tuple{getfield(Pkg.Types, Symbol("##read_manifest#40")), String, typeof(Pkg.Types.read_manifest), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Pkg.Types, Symbol("#43#44")){String}, String})
precompile(Tuple{Type{Pkg.Types.EnvCache}, Nothing})
precompile(Tuple{Type{Pkg.Types.Context}})
precompile(Tuple{Type{Base.Cmd}, Base.Cmd})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Types.PackageSpec, 1}, Nothing})
precompile(Tuple{typeof(Pkg.API.instantiate), Pkg.Types.Context})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageSpec, Symbol, Pkg.Types.UpgradeLevel})
precompile(Tuple{typeof(Pkg.Types.stdlib_dir)})
precompile(Tuple{typeof(Pkg.Types.load_stdlib)})
precompile(Tuple{typeof(Pkg.Operations.source_path), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Types.pathrepr), String})
precompile(Tuple{typeof(LibGit2.ensure_initialized)})
precompile(Tuple{typeof(LibGit2.set_ssl_cert_locations), String})
precompile(Tuple{typeof(LibGit2.initialize)})
precompile(Tuple{typeof(Base.close), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#94#97")), LibGit2.GitRepo})
precompile(Tuple{typeof(Base.close), LibGit2.GitConfig})
precompile(Tuple{Type{LibGit2.GitConfig}, LibGit2.Consts.GIT_CONFIG})
precompile(Tuple{typeof(LibGit2.clone), String, String, LibGit2.CloneOptions})
precompile(Tuple{Type{LibGit2.GitConfigIter}, LibGit2.GitConfig, Base.Regex})
precompile(Tuple{typeof(Base.iterate), LibGit2.GitConfigIter, Nothing})
precompile(Tuple{typeof(LibGit2.use_http_path), LibGit2.GitConfig, LibGit2.GitCredential})
precompile(Tuple{getfield(Base, Symbol("##shell_parse#349")), String, typeof(Base.shell_parse), String, Bool})
precompile(Tuple{typeof(Base.shell_split), String})
precompile(Tuple{typeof(Base.parse), Type{LibGit2.GitCredentialHelper}, String})
precompile(Tuple{typeof(LibGit2.credential_helpers), LibGit2.GitConfig, LibGit2.GitCredential})
precompile(Tuple{typeof(Base.read!), Base.Process, LibGit2.GitCredential})
precompile(Tuple{typeof(LibGit2.run!), LibGit2.GitCredentialHelper, String, LibGit2.GitCredential})
precompile(Tuple{typeof(LibGit2.approve), LibGit2.GitConfig, LibGit2.UserPasswordCredential, String})
precompile(Tuple{getfield(LibGit2, Symbol("##approve#33")), Bool, typeof(LibGit2.approve), LibGit2.CredentialPayload})
precompile(Tuple{typeof(LibGit2.reject), LibGit2.GitConfig, LibGit2.UserPasswordCredential, String})
precompile(Tuple{getfield(LibGit2, Symbol("##reject#34")), Bool, typeof(LibGit2.reject), LibGit2.CredentialPayload})
precompile(Tuple{getfield(LibGit2, Symbol("##clone#131")), String, Bool, Ptr{Nothing}, LibGit2.CachedCredentials, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, typeof(LibGit2.clone), String, String})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##clone#4")), String, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.GitTools.clone), Pkg.Types.Context, String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#13")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#14")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_server_dir), String, Base.SubString{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(UUIDs.uuid4)})
precompile(Tuple{typeof(Random.randstring), Int64})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{typeof(Pkg.Types.pkg_server_registry_url), Base.UUID})
precompile(Tuple{getfield(Pkg.Types, Symbol("#92#95")){Pkg.Types.Context, String, Pkg.Types.RegistrySpec}, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#20")), String, typeof(Base.Filesystem.mktempdir), getfield(Pkg.Types, Symbol("#92#95")){Pkg.Types.Context, String, Pkg.Types.RegistrySpec}, String})
precompile(Tuple{typeof(Pkg.Types.clone_or_cp_registries), Pkg.Types.Context, Array{Pkg.Types.RegistrySpec, 1}, String})
precompile(Tuple{typeof(Pkg.Types.clone_default_registries), Pkg.Types.Context})
precompile(Tuple{typeof(Pkg.Types.find_registered!), Pkg.Types.Context, Array{String, 1}, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Pkg.Types.registered_uuids), Pkg.Types.Context, String})
precompile(Tuple{typeof(Pkg.Types.registered_info), Pkg.Types.Context, Base.UUID, String})
precompile(Tuple{typeof(REPL.TerminalMenus.enableRawMode), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(REPL.TerminalMenus.disableRawMode), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(REPL.TerminalMenus.request), REPL.Terminals.TTYTerminal, REPL.TerminalMenus.RadioMenu})
precompile(Tuple{typeof(REPL.TerminalMenus.request), REPL.Terminals.TTYTerminal, String, REPL.TerminalMenus.RadioMenu})
precompile(Tuple{typeof(REPL.TerminalMenus.request), String, REPL.TerminalMenus.RadioMenu})
precompile(Tuple{typeof(Pkg.Types.registered_uuid), Pkg.Types.Context, String})
precompile(Tuple{typeof(Pkg.Types.registered_names), Pkg.Types.Context, Base.UUID})
precompile(Tuple{typeof(Pkg.Types.registered_name), Pkg.Types.Context, Base.UUID})
precompile(Tuple{typeof(Pkg.Types.registry_resolve!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Types.stdlib_resolve!), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Type{Pkg.Types.EnvCache}, String})
precompile(Tuple{typeof(Pkg.Operations.gen_target_project), Pkg.Types.Context, Pkg.Types.PackageSpec, String, String})
precompile(Tuple{typeof(Pkg.Operations.update_package_test!), Pkg.Types.PackageSpec, Pkg.Types.PackageEntry})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##test#94")), Bool, Base.Cmd, Base.Cmd, Nothing, typeof(Pkg.Operations.test), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("##test#69")), Bool, Nothing, Base.Cmd, Base.Cmd, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.test), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.API.test), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("##test#66")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.test), String})
precompile(Tuple{typeof(Pkg.API.test), String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Pkg.TOML.Table})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Types.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.Types.semver_interval), Base.RegexMatch})
precompile(Tuple{Type{Base.Dict{String, String}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, String}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.SHA1})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.SHA1}}, Base.SHA1})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt8, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{Pkg.Types.EnvCache}, Nothing, String, String, String, Pkg.Types.PackageSpec, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{String, Array{Base.UUID, 1}}, Base.Dict{Base.UUID, Array{String, 1}}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{getfield(Pkg.Types, Symbol("##Context#52")), Pkg.Types.EnvCache, IJulia.IJuliaStdio{Base.PipeEndpoint}, Bool, Bool, Int64, Bool, Bool, Type{Pkg.Types.Context}})
precompile(Tuple{typeof(Base.empty), Array{Union{Nothing, String}, 1}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#67#75")), Array{Pkg.Types.PackageSpec, 1}}, getfield(Pkg.Types, Symbol("#66#74"))}, Int64})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Pkg.Types, Symbol("#69#77")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Types, Symbol("#68#76")), Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#69#77")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#69#77")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#69#77")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.UUID, 1}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#69#77")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, getfield(Pkg.Types, Symbol("#68#76"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.UUID, 1}, Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#69#77")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, getfield(Pkg.Types, Symbol("#68#76"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{getfield(Pkg.Types, Symbol("#69#77")){String}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}}, getfield(Pkg.Types, Symbol("#68#76"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.UUID, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Pkg.Types, Symbol("#70#78"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.UUID, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Pkg.Types, Symbol("#70#78"))}, Array{Base.UUID, 1}})
precompile(Tuple{getfield(Base, Symbol("#sort!##kw")), NamedTuple{(:by,), Tuple{getfield(Pkg.Types, Symbol("#70#78"))}}, typeof(Base.sort!), Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Base.SubString{String}, 1}, Type{String}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, Type{String}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}})
precompile(Tuple{getfield(IJulia, Symbol("##error_content#34")), Symbol, String, typeof(IJulia.error_content), Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(IJulia.error_content), Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.findprev), getfield(IJulia, Symbol("#32#33")){Symbol}, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Base.show_backtrace), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(IJulia.show_bt), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Revise.update_stacktrace_lineno!), Array{Any, 1}})
precompile(Tuple{typeof(Base.getproperty), Method, Symbol})
precompile(Tuple{getfield(Base, Symbol("##show_trace_entry#667")), String, typeof(Base.show_trace_entry), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{getfield(Base, Symbol("#show_trace_entry##kw")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame, Int64})
precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Type, Bool})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeofBottom})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{}})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Pkg.Types.PkgError, Vararg{Any, N} where N})
precompile(Tuple{getfield(IJulia, Symbol("#35#36")), Base.GenericIOBuffer{Array{UInt8, 1}}, Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("##showerror#648")), Bool, typeof(Base.showerror), Base.GenericIOBuffer{Array{UInt8, 1}}, Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(IJulia.showerror_nobt), Base.GenericIOBuffer{Array{UInt8, 1}}, Pkg.Types.PkgError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#701")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Base, Symbol("#649#650")){Pkg.Types.PkgError}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{String, 1}})
precompile(Tuple{typeof(Pkg.API.add), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("##add#23")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.add), String})
precompile(Tuple{typeof(Pkg.API.add), String})
precompile(Tuple{Type{LibGit2.GitTree}, LibGit2.GitRepo, String})
precompile(Tuple{getfield(LibGit2, Symbol("##diff_tree#95")), Bool, typeof(LibGit2.diff_tree), LibGit2.GitRepo, LibGit2.GitTree, String})
precompile(Tuple{typeof(Base.close), LibGit2.GitDiff})
precompile(Tuple{typeof(Base.close), LibGit2.GitTree})
precompile(Tuple{getfield(LibGit2, Symbol("##isdiff#113")), Bool, typeof(LibGit2.isdiff), LibGit2.GitRepo, String, String})
precompile(Tuple{typeof(LibGit2.remotes), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.head), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.shortname), LibGit2.GitReference})
precompile(Tuple{Type{LibGit2.GitHash}, Ptr{UInt8}})
precompile(Tuple{Type{LibGit2.GitHash}, LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("#41#42")){LibGit2.GitRepo}, LibGit2.GitReference})
precompile(Tuple{typeof(Base.close), LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#41#42")){LibGit2.GitRepo}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.get), Type{LibGit2.GitRemote}, LibGit2.GitRepo, String})
precompile(Tuple{typeof(LibGit2.url), LibGit2.GitRemote})
precompile(Tuple{typeof(Base.close), LibGit2.GitRemote})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.GitTools, Symbol("#6#7")), LibGit2.GitRemote})
precompile(Tuple{Type{LibGit2.GitConfig}, LibGit2.GitRepo})
precompile(Tuple{getfield(LibGit2, Symbol("##fetch#62")), LibGit2.FetchOptions, String, typeof(LibGit2.fetch), LibGit2.GitRemote, Array{String, 1}})
precompile(Tuple{typeof(LibGit2.GitRemoteAnon), LibGit2.GitRepo, String})
precompile(Tuple{getfield(LibGit2, Symbol("##fetch#115")), String, String, Array{String, 1}, Nothing, Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}, typeof(LibGit2.fetch), LibGit2.GitRepo})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##fetch#5")), Nothing, Nothing, Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:refspecs,), Tuple{Array{String, 1}}}}, typeof(Pkg.GitTools.fetch), Pkg.Types.Context, LibGit2.GitRepo, Nothing})
precompile(Tuple{typeof(LibGit2.fetchheads), LibGit2.GitRepo})
precompile(Tuple{Type{LibGit2.GitAnnotated}, LibGit2.GitRepo, LibGit2.FetchHead})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LibGit2.GitAnnotated, 1}, LibGit2.GitAnnotated, Base.Generator{Array{LibGit2.FetchHead, 1}, getfield(LibGit2, Symbol("#142#150")){LibGit2.GitRepo}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{LibGit2.FetchHead, 1}, Base.Generator{Array{LibGit2.FetchHead, 1}, getfield(LibGit2, Symbol("#142#150")){LibGit2.GitRepo}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(LibGit2.merge_analysis), LibGit2.GitRepo, Array{LibGit2.GitAnnotated, 1}})
precompile(Tuple{Type{LibGit2.GitCommit}, LibGit2.GitRepo, LibGit2.GitHash})
precompile(Tuple{getfield(LibGit2, Symbol("##checkout_tree#46")), LibGit2.CheckoutOptions, typeof(LibGit2.checkout_tree), LibGit2.GitRepo, LibGit2.GitCommit})
precompile(Tuple{typeof(LibGit2.name), LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("##target!#37")), String, typeof(LibGit2.target!), LibGit2.GitReference, LibGit2.GitHash})
precompile(Tuple{typeof(LibGit2.fullname), LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("##GitReference#35")), Bool, String, Type{LibGit2.GitReference}, LibGit2.GitRepo, LibGit2.GitHash, String})
precompile(Tuple{getfield(LibGit2, Symbol("#84#85")){LibGit2.GitRepo, LibGit2.GitCommit}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#84#85")){LibGit2.GitRepo, LibGit2.GitCommit}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.ffmerge!), LibGit2.GitRepo, LibGit2.GitAnnotated})
precompile(Tuple{getfield(LibGit2, Symbol("##merge!#86")), LibGit2.MergeOptions, LibGit2.CheckoutOptions, typeof(LibGit2.merge!), LibGit2.GitRepo, Array{LibGit2.GitAnnotated, 1}})
precompile(Tuple{getfield(LibGit2, Symbol("##merge!#89")), LibGit2.MergeOptions, LibGit2.CheckoutOptions, typeof(LibGit2.merge!), LibGit2.GitRepo, Array{LibGit2.GitAnnotated, 1}, Bool})
precompile(Tuple{typeof(Base.close), LibGit2.GitAnnotated})
precompile(Tuple{typeof(Base._collect), Array{LibGit2.GitAnnotated, 1}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{LibGit2.GitObject}, LibGit2.GitRepo, Ptr{Nothing}})
precompile(Tuple{Type{LibGit2.GitObject}, LibGit2.GitRepo, String})
precompile(Tuple{typeof(LibGit2.peel), Type{LibGit2.GitCommit}, LibGit2.GitReference})
precompile(Tuple{Type{LibGit2.GitAnnotated}, LibGit2.GitRepo, LibGit2.GitHash})
precompile(Tuple{Type{LibGit2.GitAnnotated}, LibGit2.GitRepo, String})
precompile(Tuple{Type{LibGit2.GitReference}, LibGit2.GitRepo, String})
precompile(Tuple{Type{LibGit2.GitAnnotated}, LibGit2.GitRepo, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#143#151")){LibGit2.GitRepo}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.isorphan), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#144#152")), LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#146#154")), LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.upstream), LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("#148#156")){LibGit2.GitRepo}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#148#156")){LibGit2.GitRepo}, LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("##merge!#140")), String, String, Bool, LibGit2.MergeOptions, LibGit2.CheckoutOptions, typeof(LibGit2.merge!), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.default_signature), LibGit2.GitRepo})
precompile(Tuple{typeof(Base.iterate), LibGit2.GitRebase, Nothing})
precompile(Tuple{typeof(LibGit2.commit), LibGit2.GitRebase, LibGit2.GitSignature})
precompile(Tuple{typeof(Base.close), LibGit2.GitRebase})
precompile(Tuple{getfield(LibGit2, Symbol("#157#158")){LibGit2.GitRepo, String, String}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.with), getfield(LibGit2, Symbol("#157#158")){LibGit2.GitRepo, String, String}, LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.head_oid), LibGit2.GitRepo})
precompile(Tuple{getfield(Pkg.Types, Symbol("##update_registries#103")), Bool, typeof(Pkg.Types.update_registries), Pkg.Types.Context, Array{Pkg.Types.RegistrySpec, 1}})
precompile(Tuple{typeof(Pkg.Types.set_repo_source_from_registry!), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{Type{LibGit2.GitRepo}, String})
precompile(Tuple{typeof(Pkg.GitTools.check_valid_HEAD), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), typeof(Pkg.GitTools.check_valid_HEAD), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.branch), LibGit2.GitReference})
precompile(Tuple{typeof(LibGit2.branch), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.peel), Type{LibGit2.GitTree}, LibGit2.GitReference})
precompile(Tuple{getfield(LibGit2, Symbol("##checkout_tree#46")), LibGit2.CheckoutOptions, typeof(LibGit2.checkout_tree), LibGit2.GitRepo, LibGit2.GitTree})
precompile(Tuple{typeof(Pkg.GitTools.checkout_tree_to_path), LibGit2.GitRepo, LibGit2.GitTree, String})
precompile(Tuple{typeof(Pkg.set_readonly), String})
precompile(Tuple{typeof(Pkg.Types.get_object_or_branch), LibGit2.GitRepo, String})
precompile(Tuple{getfield(Pkg.Types, Symbol("#54#55")){Pkg.Types.Context, Pkg.Types.PackageSpec}, LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Types, Symbol("#54#55")){Pkg.Types.Context, Pkg.Types.PackageSpec}, LibGit2.GitRepo})
precompile(Tuple{typeof(Pkg.Types.handle_repo_add!), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Types.handle_repos_add!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.update_package_add), Pkg.Types.Context, Pkg.Types.PackageSpec, Pkg.Types.PackageEntry, Bool})
precompile(Tuple{typeof(Pkg.Operations.tracking_registered_version), Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Base.filter), typeof(Pkg.Operations.tracking_registered_version), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Types.registered_paths), Pkg.Types.Context, Base.UUID})
precompile(Tuple{typeof(Pkg.Operations.check_registered), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.collect_developed!), Pkg.Types.Context, Pkg.Types.PackageSpec, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.collect_developed), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.set_maximum_version_registry!), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Operations.collect_project!), Pkg.Types.Context, Pkg.Types.PackageSpec, String, Base.Dict{Base.UUID, Array{Pkg.Types.PackageSpec, 1}}})
precompile(Tuple{typeof(Pkg.Operations.collect_fixed!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Base.Dict{Base.UUID, String}})
precompile(Tuple{typeof(Pkg.Operations.deps_graph), Pkg.Types.Context, Base.Dict{Base.UUID, String}, Base.Dict{Base.UUID, Pkg.Types.VersionSpec}, Base.Dict{Base.UUID, Pkg.Resolve.Fixed}})
precompile(Tuple{typeof(Pkg.Resolve.log_event_global!), Pkg.Resolve.Graph, String})
precompile(Tuple{getfield(Pkg.Resolve, Symbol("##propagate_constraints!#61")), Bool, typeof(Pkg.Resolve.propagate_constraints!), Pkg.Resolve.Graph, Base.Set{Int64}})
precompile(Tuple{typeof(Pkg.Resolve.disable_unreachable!), Pkg.Resolve.Graph, Base.Set{Int64}})
precompile(Tuple{typeof(Pkg.Resolve.deep_clean!), Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Resolve.prune_graph!), Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Resolve.compute_eq_classes!), Pkg.Resolve.Graph})
precompile(Tuple{getfield(Pkg.Resolve, Symbol("##simplify_graph!#115")), Bool, typeof(Pkg.Resolve.simplify_graph!), Pkg.Resolve.Graph, Base.Set{Int64}})
precompile(Tuple{getfield(Pkg.Resolve, Symbol("##compute_eq_classes_soft!#82")), Bool, typeof(Pkg.Resolve.compute_eq_classes_soft!), Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Resolve.greedysolver), Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Resolve.verify_solution), Array{Int64, 1}, Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Resolve.enforce_optimality!), Array{Int64, 1}, Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Resolve.try_simplify_graph_soft!), Pkg.Resolve.Graph, Base.Set{Int64}})
precompile(Tuple{typeof(Pkg.Resolve.converge!), Pkg.Resolve.Graph, Pkg.Resolve.Messages, Pkg.Resolve.SolutionTrace, Pkg.Resolve.NodePerm, Pkg.Resolve.MaxSumParams})
precompile(Tuple{typeof(Pkg.Resolve.maxsum), Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Resolve.trigger_failure!), Pkg.Resolve.Graph, Array{Int64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Pkg.Resolve.resolve), Pkg.Resolve.Graph})
precompile(Tuple{typeof(Pkg.Operations.load_tree_hash), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Operations.load_tree_hashes!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.resolve_versions!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.targeted_resolve), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Pkg.Types.PreserveLevel})
precompile(Tuple{typeof(Pkg.Operations.tiered_resolve), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.load_deps), Pkg.Types.Context, Pkg.Types.PackageSpec})
precompile(Tuple{typeof(Pkg.Operations.update_manifest!), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.load_urls), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Type{LibGit2.GitObject}, LibGit2.GitRepo, LibGit2.GitHash})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##fetch#5")), Nothing, Nothing, Base.Iterators.Pairs{Symbol, Array{String, 1}, Tuple{Symbol}, NamedTuple{(:refspecs,), Tuple{Array{String, 1}}}}, typeof(Pkg.GitTools.fetch), Pkg.Types.Context, LibGit2.GitRepo, String})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##clone#4")), String, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:isbare,), Tuple{Bool}}}, typeof(Pkg.GitTools.clone), Pkg.Types.Context, String, String})
precompile(Tuple{typeof(Pkg.Operations.install_git), Pkg.Types.Context, Base.UUID, String, Base.SHA1, Array{String, 1}, Base.VersionNumber, String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##download_source#40")), Bool, typeof(Pkg.Operations.download_source), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Pkg.Display, Symbol("#39#40"))}, Pkg.Display.DiffEntry, Pkg.Display.DiffEntry})
precompile(Tuple{typeof(Base.sort!), Array{Pkg.Display.DiffEntry, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Pkg.Display, Symbol("#39#40"))}})
precompile(Tuple{typeof(Base.sort!), Array{Pkg.Display.DiffEntry, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Pkg.Display, Symbol("#39#40"))}, Array{Pkg.Display.DiffEntry, 1}})
precompile(Tuple{typeof(Pkg.Display.manifest_diff), Pkg.Types.Context, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}})
precompile(Tuple{typeof(Pkg.Display.print_diff), Pkg.Types.Context, Array{Pkg.Display.DiffEntry, 1}, Bool})
precompile(Tuple{typeof(Pkg.Display.print_env_diff), Pkg.Types.Context})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##build_versions#56")), Bool, Bool, typeof(Pkg.Operations.build_versions), Pkg.Types.Context, Array{Base.UUID, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##add#71")), Pkg.Types.PreserveLevel, Pkg.BinaryPlatforms.Linux, typeof(Pkg.Operations.add), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Array{Base.UUID, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("##add#28")), Pkg.Types.PreserveLevel, Pkg.BinaryPlatforms.Linux, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.add), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, String, Pkg.TOML.Table, Int64})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), IJulia.IJuliaStdio{Base.PipeEndpoint}, Symbol, String, Bool})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#701")), Bool, typeof(Base.with_output_color), Function, Symbol, IJulia.IJuliaStdio{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, Char})
precompile(Tuple{Type{NamedTuple{(:header, :color), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:header, :color), Tuple{String, Symbol}}, Type{Pkg.GitTools.MiniProgressBar}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Pkg.GitTools.MiniProgressBar, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, LibGit2.CredentialPayload, Symbol})
precompile(Tuple{Type{NamedTuple{(:transfer_progress, :credentials), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:payload,), Tuple{Base.Dict{Symbol, Any}}}}, Type{NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:payload,), Tuple{Base.Dict{Symbol, Any}}}, NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:version, :payload), Tuple{UInt32, Ptr{Nothing}}}}, Type{NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:payload, :transfer_progress, :credentials), Tuple{Base.Dict{Symbol, Any}, Ptr{Nothing}, Ptr{Nothing}}}, Type{LibGit2.RemoteCallbacks}})
precompile(Tuple{typeof(Pkg.GitTools.transfer_progress), Ptr{LibGit2.TransferProgress}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GitTools.MiniProgressBar, Symbol, UInt32})
precompile(Tuple{typeof(Base.convert), Type{Float64}, UInt32})
precompile(Tuple{typeof(Base.print), IJulia.IJuliaStdio{Base.PipeEndpoint}, String, String})
precompile(Tuple{typeof(Printf.print_fixed), IJulia.IJuliaStdio{Base.PipeEndpoint}, Int64, Int32, Int32, Bool, Array{UInt8, 1}})
precompile(Tuple{typeof(Pkg.GitTools.showprogress), IJulia.IJuliaStdio{Base.PipeEndpoint}, Pkg.GitTools.MiniProgressBar})
precompile(Tuple{typeof(Base.setproperty!), Pkg.GitTools.MiniProgressBar, Symbol, String})
precompile(Tuple{typeof(Base._ntuple), Function, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(LibGit2, Symbol("#2#3")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{LibGit2.GitAnnotated, 1}, Type{Nothing}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{LibGit2.GitAnnotated, 1}, typeof(Base.close)}, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UUID, 1}, Base.UUID})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{String, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.get!), Base.Dict{String, Array{Base.UUID, 1}}, String, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Base.UUID, Array{String, 1}}, Base.UUID, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{String, Any}, Int64})
precompile(Tuple{typeof(Base.close), LibGit2.GitCommit})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Pkg.Types.VersionSpec}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Pkg.Types.VersionSpec}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Base.SHA1, Base.VersionNumber}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Base.SHA1, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Pkg.Operations.load_package_data_raw), Type{T} where T, String})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Int64})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}}, Pkg.Types.VersionRange, Base.Dict{String, Base.UUID}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Base.UUID}, String})
precompile(Tuple{typeof(Base.get!), Base.Dict{Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}}, Pkg.Types.VersionRange, Base.Dict{String, Pkg.Types.VersionSpec}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Pkg.Types.VersionSpec}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Pkg.Types.VersionSpec}, String})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, String})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Pkg.Types.VersionRange, 1}, Pkg.Types.VersionRange, Base.Generator{Array{String, 1}, Type{Pkg.Types.VersionRange}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, Type{Pkg.Types.VersionRange}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{Pkg.Types.VersionSpec}, Array{String, 1}})
precompile(Tuple{Type{Pkg.Types.VersionBound}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.hash), Tuple{UInt64}, UInt64})
precompile(Tuple{typeof(Pkg.TOML.insertpair), Pkg.TOML.Parser{Base.IOStream}, Pkg.TOML.Table, String, Bool, Int64})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Vararg{Base.BitArray{2}, N} where N})
precompile(Tuple{typeof(Base.sum), Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#189")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.MappingRF{getfield(Base, Symbol("#230#233")), Base.BottomRF{typeof(Base.add_sum)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#230#233")), typeof(Base.add_sum), NamedTuple{(), Tuple{}}, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#231#234")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#231#234"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.getindex), Array{Array{UInt64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#231#234"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.sum), Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#189")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#230#233")), typeof(Base.add_sum), NamedTuple{(), Tuple{}}, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#231#234")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#231#234"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.sum), Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#189")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#230#233")), typeof(Base.add_sum), NamedTuple{(), Tuple{}}, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#231#234")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#231#234"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.sum), Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#189")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#230#233")), typeof(Base.add_sum), NamedTuple{(), Tuple{}}, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#231#234")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#231#234"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}}, getfield(Base, Symbol("#231#234"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}})
precompile(Tuple{typeof(Base.sum), Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#189")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#230#233")), typeof(Base.add_sum), NamedTuple{(), Tuple{}}, Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#231#234")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#231#234"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#232#235")), Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}}, getfield(Base, Symbol("#232#235"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{getfield(Pkg.Resolve, Symbol("#88#90")){Base.BitArray{1}, Array{Int64, 1}}, Base.UnitRange{Int64}}, getfield(Pkg.Resolve, Symbol("#87#89")){Array{Base.BitArray{1}, 1}, Array{Int64, 1}, Array{Base.BitArray{2}, 1}, Int64}}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}})
precompile(Tuple{Type{NamedTuple{(:name, :version, :pinned, :tree_hash, :path, :repo), T} where T<:Tuple}, Tuple{String, Base.VersionNumber, Bool, Base.SHA1, Nothing, Pkg.Types.GitRepo}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:name, :version, :pinned, :tree_hash, :path, :repo), Tuple{String, Base.VersionNumber, Bool, Base.SHA1, Nothing, Pkg.Types.GitRepo}}, Type{Pkg.Types.PackageEntry}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.UUID})
precompile(Tuple{typeof(Base.setup_stdio), IJulia.IJuliaStdio{Base.PipeEndpoint}, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#download_artifacts##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Operations.download_artifacts), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#download_artifacts##kw")), NamedTuple{(:platform, :verbose), Tuple{Pkg.BinaryPlatforms.Linux, Bool}}, typeof(Pkg.Operations.download_artifacts), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##download_artifacts#37")), Pkg.BinaryPlatforms.Linux, Bool, typeof(Pkg.Operations.download_artifacts), Pkg.Types.Context, Array{String, 1}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##download_artifacts#34")), Pkg.BinaryPlatforms.Linux, Bool, typeof(Pkg.Operations.download_artifacts), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Union{Nothing, String}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Tuple{Pkg.Types.Context}, Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, String}, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Tuple{Pkg.Types.Context}, Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, Nothing, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Union{Nothing, String}, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Tuple{Pkg.Types.Context}, Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{String, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Tuple{Pkg.Types.Context}, Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Operations.source_path), Tuple{Tuple{Pkg.Types.Context}, Base.Broadcast.Extruded{Array{Pkg.Types.PackageSpec, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_all_artifacts_installed#47")), Pkg.BinaryPlatforms.Platform, Nothing, Bool, Bool, Bool, typeof(Pkg.Artifacts.ensure_all_artifacts_installed), String})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{Type{NamedTuple{(:platform, :verbose, :quiet_download), T} where T<:Tuple}, Tuple{Pkg.BinaryPlatforms.Linux, Bool, Bool}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform, :verbose, :quiet_download), Tuple{Pkg.BinaryPlatforms.Linux, Bool, Bool}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Pkg.Operations.install_archive), Array{Base.Pair{String, Bool}, 1}, Base.SHA1, String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#43#46")){Bool, Pkg.Types.Context, Base.Dict{Base.UUID, Array{String, 1}}, Base.Channel{Any}, Base.Channel{Any}}})
precompile(Tuple{Type{Pkg.Display.VerInfo}, Base.SHA1, Nothing, Base.VersionNumber, Bool, Nothing})
precompile(Tuple{typeof(Pkg.Display.vstring), Pkg.Types.Context, Pkg.Display.VerInfo})
precompile(Tuple{typeof(Pkg.Display.print_diff), IJulia.IJuliaStdio{Base.PipeEndpoint}, Pkg.Types.Context, Array{Pkg.Display.DiffEntry, 1}, Bool})
precompile(Tuple{getfield(Pkg.Types, Symbol("#should_delete#32")), String})
precompile(Tuple{getfield(Pkg.Types, Symbol("#should_delete#32")), Base.UUID})
precompile(Tuple{getfield(Pkg.Types, Symbol("#should_delete#32")), Base.VersionNumber})
precompile(Tuple{typeof(Base.findfirst), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Pkg.Types, Symbol("#34#35")){String}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.something), Int64, Int64})
precompile(Tuple{typeof(Base.isless), Tuple{Int64, String}, Tuple{Int64, String}})
precompile(Tuple{typeof(Base.something), Nothing, Int64})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#printvalue##kw")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{typeof(Pkg.TOML.is_tabular), Base.Dict{String, String}})
precompile(Tuple{typeof(Pkg.TOML.is_tabular), Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(Pkg.TOML.is_tabular), Base.VersionNumber})
precompile(Tuple{getfield(Pkg.TOML, Symbol("##printvalue#8")), Bool, typeof(Pkg.TOML.printvalue), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#printvalue##kw")), NamedTuple{(:sorted,), Tuple{Bool}}, typeof(Pkg.TOML.printvalue), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.values), Base.Dict{String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.is_tabular), Base.ValueIterator{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.ValueIterator{Base.Dict{String, String}}, typeof(Pkg.TOML.is_tabular)}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, String}}, typeof(Pkg.TOML.is_tabular)}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#_print##kw")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, getfield(Pkg.Types, Symbol("#36#38"))}}, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}, Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.KeySet{String, Base.Dict{String, String}}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}, Array{String, 1}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, Array{String, 1}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Pkg.TOML.is_tabular), Base.ValueIterator{Base.Dict{String, Array{String, 1}}}})
precompile(Tuple{typeof(Base._all), typeof(Base.identity), Base.Generator{Base.ValueIterator{Base.Dict{String, Array{String, 1}}}, typeof(Pkg.TOML.is_tabular)}, Base.Colon})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, Array{String, 1}}}, typeof(Pkg.TOML.is_tabular)}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("#_print##kw")), NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, getfield(Pkg.Types, Symbol("#36#38"))}}, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Array{String, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.KeySet{String, Base.Dict{String, Array{String, 1}}}})
precompile(Tuple{getfield(Pkg.TOML, Symbol("##_print#9")), Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Array{String, 1}}, Array{String, 1}})
precompile(Tuple{getfield(Pkg.Types, Symbol("#entry!#47")){getfield(Pkg.Types, Symbol("#entry!#45#48"))}, Base.Dict{String, Any}, String, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.Types, Symbol("#entry!#47")){getfield(Pkg.Types, Symbol("#entry!#45#48"))}, Base.Dict{String, Any}, String, Base.SHA1})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#visit#55")){Pkg.Types.Context, Base.Dict{Base.UUID, Int64}, Array{Base.UUID, 1}}, Base.UUID})
precompile(Tuple{typeof(Base.foreach), getfield(Pkg.Operations, Symbol("#visit#55")){Pkg.Types.Context, Base.Dict{Base.UUID, Int64}, Array{Base.UUID, 1}}, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, Nothing})
precompile(Tuple{getfield(Pkg.API, Symbol("#instantiate##kw")), NamedTuple{(:manifest, :update_registry, :verbose), Tuple{Nothing, Bool, Bool}}, typeof(Pkg.API.instantiate), Pkg.Types.Context})
precompile(Tuple{typeof(Pkg.Operations.check_artifacts_downloaded), String})
precompile(Tuple{typeof(Pkg.Operations.is_instantiated), Pkg.Types.Context})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##clone#4")), Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:isbare,), Tuple{Bool}}}, typeof(Pkg.GitTools.clone), Pkg.Types.Context, Nothing, String})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("#clone##kw")), NamedTuple{(:isbare,), Tuple{Bool}}, typeof(Pkg.GitTools.clone), Pkg.Types.Context, Nothing, String})
precompile(Tuple{getfield(Pkg.GitTools, Symbol("##clone#4")), Nothing, Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:isbare,), Tuple{Bool}}}, typeof(Pkg.GitTools.clone), Pkg.Types.Context, String, String})
precompile(Tuple{getfield(Pkg.API, Symbol("##instantiate#117")), Nothing, Bool, Bool, Pkg.BinaryPlatforms.Linux, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.instantiate), Pkg.Types.Context})
precompile(Tuple{typeof(Pkg.Artifacts.extract_all_hashes), String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Pkg.Artifacts.artifact_exists), Tuple{Base.Broadcast.Extruded{Array{Base.SHA1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##check_artifacts_downloaded#38")), Pkg.BinaryPlatforms.Linux, typeof(Pkg.Operations.check_artifacts_downloaded), String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##extract_all_hashes#48")), Pkg.BinaryPlatforms.Platform, Nothing, Bool, typeof(Pkg.Artifacts.extract_all_hashes), String})
precompile(Tuple{Type{Pkg.Types.EnvCache}, String, Nothing, String, String, Pkg.Types.PackageSpec, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{String, Array{Base.UUID, 1}}, Base.Dict{Base.UUID, Array{String, 1}}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{Type{Base.Dict{Base.PkgId, String}}})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Revise, Symbol("#36#37")){Base.Dict{Base.PkgId, String}, String}, String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, String}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, String}, Base.PkgId})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, String}, String, Base.PkgId})
precompile(Tuple{typeof(Base._uv_hook_close), FileWatching.FileMonitor})
precompile(Tuple{typeof(Pkg.Operations.sandbox), Function, Pkg.Types.Context, Pkg.Types.PackageSpec, String, String, Pkg.Types.Project})
precompile(Tuple{typeof(Base.Filesystem.mktempdir), Function, String})
precompile(Tuple{typeof(Pkg.Operations.up_load_versions!), Pkg.Types.Context, Pkg.Types.PackageSpec, Pkg.Types.PackageEntry, Pkg.Types.UpgradeLevel})
precompile(Tuple{typeof(Pkg.Operations.download_artifacts), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Pkg.Operations.build_versions), Pkg.Types.Context, Array{Base.UUID, 1}})
precompile(Tuple{typeof(Pkg.Operations.up), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}, Pkg.Types.UpgradeLevel})
precompile(Tuple{getfield(Pkg.API, Symbol("##up#48")), Pkg.Types.UpgradeLevel, Pkg.Types.PackageMode, Bool, Base.Iterators.Pairs{Symbol, Base.DevNull, Tuple{Symbol}, NamedTuple{(:io,), Tuple{Base.DevNull}}}, typeof(Pkg.API.up), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("#up##kw")), NamedTuple{(:level, :mode, :update_registry, :io), Tuple{Pkg.Types.UpgradeLevel, Pkg.Types.PackageMode, Bool, Base.DevNull}}, typeof(Pkg.API.up), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{getfield(Pkg.API, Symbol("##up#43")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:level, :mode, :update_registry, :io), Tuple{Pkg.Types.UpgradeLevel, Pkg.Types.PackageMode, Bool, Base.DevNull}}}, typeof(Pkg.API.up), Pkg.Types.Context})
precompile(Tuple{getfield(Pkg.API, Symbol("#up##kw")), NamedTuple{(:level, :mode, :update_registry, :io), Tuple{Pkg.Types.UpgradeLevel, Pkg.Types.PackageMode, Bool, Base.DevNull}}, typeof(Pkg.API.up), Pkg.Types.Context})
precompile(Tuple{getfield(Pkg.API, Symbol("##resolve#52")), Base.Iterators.Pairs{Symbol, Base.DevNull, Tuple{Symbol}, NamedTuple{(:io,), Tuple{Base.DevNull}}}, typeof(Pkg.API.resolve), Pkg.Types.Context})
precompile(Tuple{getfield(Pkg.API, Symbol("#resolve##kw")), NamedTuple{(:io,), Tuple{Base.DevNull}}, typeof(Pkg.API.resolve), Pkg.Types.Context})
precompile(Tuple{getfield(Pkg.API, Symbol("##resolve#51")), Base.Iterators.Pairs{Symbol, Base.DevNull, Tuple{Symbol}, NamedTuple{(:io,), Tuple{Base.DevNull}}}, typeof(Pkg.API.resolve)})
precompile(Tuple{typeof(LibGit2.gitdir), LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.path), LibGit2.GitRepo})
precompile(Tuple{Type{LibGit2.GitBlob}, LibGit2.GitRepo, String})
precompile(Tuple{typeof(LibGit2.rawcontent), LibGit2.GitBlob})
precompile(Tuple{typeof(Base.close), LibGit2.GitBlob})
precompile(Tuple{getfield(Pkg.Display, Symbol("##git_file_stream#1")), Bool, typeof(Pkg.Display.git_file_stream), LibGit2.GitRepo, String})
precompile(Tuple{getfield(Pkg.Types, Symbol("##read_manifest#40")), Nothing, typeof(Pkg.Types.read_manifest), Base.DevNull})
precompile(Tuple{getfield(Pkg.Types, Symbol("##read_manifest#40")), Nothing, typeof(Pkg.Types.read_manifest), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Pkg.Display, Symbol("#4#15")){Pkg.Types.EnvCache}, LibGit2.GitRepo})
precompile(Tuple{typeof(LibGit2.with), getfield(Pkg.Display, Symbol("#4#15")){Pkg.Types.EnvCache}, LibGit2.GitRepo})
precompile(Tuple{getfield(Pkg.Display, Symbol("##status#2")), Bool, Pkg.Types.PackageMode, Bool, typeof(Pkg.Display.status), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}, String}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("##gen_test_code#83")), Bool, Base.Cmd, Base.Cmd, typeof(Pkg.Operations.gen_test_code), String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#95#96")){Bool, Base.Cmd, Base.Cmd, Nothing, Pkg.Types.Context, Array{String, 1}, String, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.withenv), getfield(Pkg.Operations, Symbol("#95#96")){Bool, Base.Cmd, Base.Cmd, Nothing, Pkg.Types.Context, Array{String, 1}, String, Pkg.Types.PackageSpec}, Base.Pair{String, String}})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#85#89")){String, getfield(Pkg.Operations, Symbol("#95#96")){Bool, Base.Cmd, Base.Cmd, Nothing, Pkg.Types.Context, Array{String, 1}, String, Pkg.Types.PackageSpec}, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Pkg.Operations.with_temp_env), getfield(Pkg.Operations, Symbol("#85#89")){String, getfield(Pkg.Operations, Symbol("#95#96")){Bool, Base.Cmd, Base.Cmd, Nothing, Pkg.Types.Context, Array{String, 1}, String, Pkg.Types.PackageSpec}, Pkg.Types.PackageSpec}, String})
precompile(Tuple{getfield(Pkg.Operations, Symbol("#84#88")){getfield(Pkg.Operations, Symbol("#95#96")){Bool, Base.Cmd, Base.Cmd, Nothing, Pkg.Types.Context, Array{String, 1}, String, Pkg.Types.PackageSpec}, Pkg.Types.Context, Pkg.Types.PackageSpec, String, Pkg.Types.Project, String}, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#20")), String, typeof(Base.Filesystem.mktempdir), getfield(Pkg.Operations, Symbol("#84#88")){getfield(Pkg.Operations, Symbol("#95#96")){Bool, Base.Cmd, Base.Cmd, Nothing, Pkg.Types.Context, Array{String, 1}, String, Pkg.Types.PackageSpec}, Pkg.Types.Context, Pkg.Types.PackageSpec, String, Pkg.Types.Project, String}, String})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Array{Base.UUID, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Base.UUID, Array{String, 1}}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{NamedTuple{(:name, :path, :deps), T} where T<:Tuple}, Tuple{String, String, Base.Dict{String, Base.UUID}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:name, :path, :deps), Tuple{String, String, Base.Dict{String, Base.UUID}}}, Type{Pkg.Types.PackageEntry}})
precompile(Tuple{typeof(Base.vect), Base.UUID})
precompile(Tuple{Type{Pkg.Types.EnvCache}, String, Nothing, String, String, Nothing, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{String, Array{Base.UUID, 1}}, Base.Dict{Base.UUID, Array{String, 1}}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{typeof(Base.something), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:name, :uuid), T} where T<:Tuple}, Tuple{String, Base.UUID}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:name, :uuid), Tuple{String, Base.UUID}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.convert), Type{Union{Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Types.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), Base.DevNull, Symbol, String, Bool})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#701")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.DevNull, String})
precompile(Tuple{typeof(Base.print), Base.DevNull, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.DevNull, String})
precompile(Tuple{typeof(Base.print), Base.DevNull, Char})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.DevNull, String})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Type{T} where T})
precompile(Tuple{typeof(Base.promote_type), Type{typeof(Base.sin)}, Type{typeof(Base.cos)}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.sin), typeof(Base.cos)}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Function, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Function, 1}})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}}})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{RecipesPipeline.GroupBy, Array{Function, 1}}})
precompile(Tuple{typeof(RecipesPipeline._recipedata_vector), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}}})
precompile(Tuple{typeof(RecipesPipeline._process_userrecipes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{getfield(PlotUtils, Symbol("#32#34")){Array{Float64, 1}}, Function})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Function, 1}, getfield(PlotUtils, Symbol("#32#34")){Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Function, 1}, getfield(PlotUtils, Symbol("#32#34")){Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Dict{Float64, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, Int64}, Float64})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Int64}, Base.Dict{Float64, Int64}, Float64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, Int64}, Float64})
precompile(Tuple{typeof(Base.indexin), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.max), Int64, Nothing})
precompile(Tuple{typeof(Base.max), Nothing, Nothing})
precompile(Tuple{typeof(Base.max), Nothing, Int64})
precompile(Tuple{typeof(Base._fast), typeof(Base.max), Nothing, Nothing})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Nothing, Int64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._fast), typeof(Base.max), Int64, Nothing})
precompile(Tuple{typeof(Base._fast), typeof(Base.max), Nothing, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Union{Nothing, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Union{Nothing, Int64}, 1}})
precompile(Tuple{typeof(PlotUtils.tryrange), Array{Function, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(PlotUtils.tryrange), typeof(Base.cos), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PlotUtils, Symbol("#33#35")){Array{Float64, 1}, Int64}, Array{Function, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("#33#35")){Array{Float64, 1}, Int64}, Function})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Function, 1}, getfield(PlotUtils, Symbol("#33#35")){Array{Float64, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Function, 1}, getfield(PlotUtils, Symbol("#33#35")){Array{Float64, 1}, Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.identity), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Function, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Function, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Function, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#66#67")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Float64, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#66#67")){Base.Dict{Symbol, Any}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#66#67")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Function, 1}, Symbol, Symbol, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Symbol}, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Base.Broadcast.Extruded{Array{Function, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Base.Broadcast.Extruded{Array{Function, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Base.Broadcast.Extruded{Array{Function, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Float64})
precompile(Tuple{getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#27")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#28#30")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, getfield(RecipesPipeline, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, getfield(RecipesPipeline, Symbol("#17#19"))}, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}, Nothing})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline._preprocess_axis_args!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Array{Array{Float64, 1}, 1}}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline._postprocess_axis_args!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Array{Float64, 1}, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Base.Missing, Number}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Number}, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, Number}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, Number}, 1}}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Array{Union{Base.Missing, Number}, 1}, Base.Generator{Array{Union{Base.Missing, Number}, 1}, typeof(Base.float)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(RecipesPipeline._prepare_series_data), Array{Union{Base.Missing, Number}, 1}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Union{Base.Missing, Number}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Union{Base.Missing, AbstractString}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, AbstractString}, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Base.Missing, AbstractString}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Type{Array{Union{Base.Missing, AbstractString}, 1}}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base._replace!), getfield(RecipesPipeline, Symbol("#39#40")), Array{Union{Base.Missing, AbstractString}, 1}, Array{Union{Base.Missing, AbstractString}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Array{Float64, 1}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, Nothing, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(SoftGlobalScope.localvars), Expr})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{typeof(Base.cos)}})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{RecipesPipeline.GroupBy, typeof(Base.cos)}})
precompile(Tuple{typeof(RecipesPipeline._recipedata_vector), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.cos)}})
precompile(Tuple{typeof(RecipesPipeline._process_userrecipes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.cos)}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.cos)}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.cos)}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.cos)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Function})
precompile(Tuple{typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Function})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Int64, Base.Set{Symbol}, Base.Set{Symbol}, Bool, Bool})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, Int64, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{typeof(Plots.scatter), Array{Float64, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#346")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(IJulia.metadata), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(GR.setborderwidth), Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Base.Dict{Any, Any}}, Base.Pair{String, Base.Dict{String, Union{String, JSON.Writer.JSONText}}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, Union{String, JSON.Writer.JSONText}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Float64, Int64, Symbol})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{Base.Colon, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), LineNumberNode, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, LineNumberNode, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.:(+)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.big), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(LaTeXStrings, Symbol("#@L_str")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(LaTeXStrings.latexstring), String})
precompile(Tuple{typeof(Base.string), Char, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{Type{NamedTuple{(:xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}}, typeof(RecipesBase.plot)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}, typeof(RecipesBase.plot)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, LaTeXStrings.LaTeXString, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Plots.slice_arg), LaTeXStrings.LaTeXString, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, LaTeXStrings.LaTeXString})
precompile(Tuple{Type{NamedTuple{(:lims, :guide), T} where T<:Tuple}, Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:lims, :guide), Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:lims, :guide), Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#91")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:lims, :guide), Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:lims, :guide), Tuple{Array{Int64, 1}, LaTeXStrings.LaTeXString}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, LaTeXStrings.LaTeXString, Symbol})
precompile(Tuple{Type{NamedTuple{(:label,), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:label,), Tuple{LaTeXStrings.LaTeXString}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, LaTeXStrings.LaTeXString, Tuple{Symbol}, NamedTuple{(:label,), Tuple{LaTeXStrings.LaTeXString}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.cmp), LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Base.:(==)), LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Base.in), LaTeXStrings.LaTeXString, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Plots.is_2tuple), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.widen), Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#336")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.:(==)), LaTeXStrings.LaTeXString, Symbol})
precompile(Tuple{typeof(Base.:(!=)), LaTeXStrings.LaTeXString, String})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#336")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Float64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(GR.inqmathtex), Int64, Int64, String})
precompile(Tuple{typeof(Base.string_index_err), Base.SubString{LaTeXStrings.LaTeXString}, Int64})
precompile(Tuple{typeof(Base.nextind), Base.SubString{LaTeXStrings.LaTeXString}, Int64, Int64})
precompile(Tuple{typeof(Base.string_index_err), LaTeXStrings.LaTeXString, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Char}, LaTeXStrings.LaTeXString, Int64})
precompile(Tuple{typeof(GR.latin1), LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.print_to_string), LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#68#69")){typeof(Base.:(==))}, Base.Iterators.Zip{Tuple{Base.SubString{LaTeXStrings.LaTeXString}, Base.Iterators.Stateful{Base.Iterators.Rest{String, Int64}, Union{Nothing, Tuple{Char, Int64}}}}}, Base.Colon})
precompile(Tuple{typeof(Base._searchindex), LaTeXStrings.LaTeXString, String, Int64})
precompile(Tuple{typeof(Plots.gr_inqtext), Int64, Int64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Plots.gr_text_size), LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.string), LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Plots.gr_axis_height), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(GR.textext), Float64, Float64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(GR.text), Float64, Float64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Plots.gr_text), Float64, Float64, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Plots.gr_axis_width), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{Type{Ref{T} where T}, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Val{3}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{typeof(Base.:(^))}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Base.RefValue{Base.Val{3}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Val{3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Base.RefValue{Base.Val{3}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.RefValue{Base.Val{3}}}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Symbol, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:title, :xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}}, typeof(RecipesBase.plot)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:title, :xlabel, :ylabel, :xlim, :ylim, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Array{Int64, 1}, Array{Int64, 1}, Symbol}}, typeof(RecipesBase.plot)})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.shift_linenum), Bool, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.BitArray{1}})
precompile(Tuple{typeof(Base.iterate), Base.BitArray{1}, Int64})
precompile(Tuple{Type{NamedTuple{(:label,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:label,), Tuple{Bool}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:label,), Tuple{Bool}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.:(==)), Bool, String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(*)), Base.TwicePrecision{Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Bool, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Bool, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.:(-)), Base.Irrational{:π}})
precompile(Tuple{typeof(Base.:(/)), Base.Irrational{:π}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.tan), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Math.tan_domain_error), Float64})
precompile(Tuple{typeof(Base.tan), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.tan), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.tan), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{Type{NamedTuple{(:title, :xlabel, :ylabel, :aspect_ratio), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Symbol}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :xlabel, :ylabel, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :xlabel, :ylabel, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Symbol}}}, typeof(RecipesBase.plot)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:title, :xlabel, :ylabel, :aspect_ratio), Tuple{LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, LaTeXStrings.LaTeXString, Symbol}}, typeof(RecipesBase.plot)})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:guide,), Tuple{LaTeXStrings.LaTeXString}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#91")), Base.Iterators.Pairs{Symbol, LaTeXStrings.LaTeXString, Tuple{Symbol}, NamedTuple{(:guide,), Tuple{LaTeXStrings.LaTeXString}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:guide,), Tuple{LaTeXStrings.LaTeXString}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{LineNumberNode}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.shift_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#@animate")), LineNumberNode, Module, Expr, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##_animate#216")), Bool, typeof(Plots._animate), Expr})
precompile(Tuple{typeof(Plots._animate), Expr})
precompile(Tuple{typeof(Plots.png), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Plots.frame), Plots.Animation, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, Base.SubString{String}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope.add_linenum), Symbol, Int64, Symbol})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope.add_linenum), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(SoftGlobalScope._softscope), Symbol, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{LineNumberNode, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Symbol, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Type{Expr}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(SoftGlobalScope._softscope), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Set{Symbol}}, Base.RefValue{Base.Set{Symbol}}, Bool, Bool}}, String, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(SoftGlobalScope._softscope), Int64, Base.Set{Symbol}, Base.Set{Symbol}, Bool})
precompile(Tuple{Type{NamedTuple{(:fps,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(FFMPEG_jll, Symbol("##ffmpeg#10")), Bool, Bool, typeof(FFMPEG_jll.ffmpeg), getfield(FFMPEG, Symbol("#4#6")){Base.Cmd}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Int64}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(Plots, Symbol("##buildanimation#213")), Int64, Int64, Bool, Bool, Bool, typeof(Plots.buildanimation), Plots.Animation, String, Bool})
precompile(Tuple{getfield(Plots, Symbol("#gif##kw")), NamedTuple{(:fps,), Tuple{Int64}}, typeof(Plots.gif), Plots.Animation, String})
precompile(Tuple{typeof(Base.arg_gen), Int64})
precompile(Tuple{typeof(Base.arg_gen), String, Base.SubString{String}})
precompile(Tuple{getfield(FFMPEG_jll, Symbol("#11#12")){getfield(FFMPEG, Symbol("#4#6")){Base.Cmd}}})
precompile(Tuple{typeof(Base.withenv), getfield(FFMPEG_jll, Symbol("#11#12")){getfield(FFMPEG, Symbol("#4#6")){Base.Cmd}}, Base.Pair{String, String}, Vararg{Base.Pair{String, String}, N} where N})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.Cmd}}})
precompile(Tuple{getfield(FFMPEG, Symbol("#4#6")){Base.Cmd}, String})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:fn,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#handle_message##kw")), NamedTuple{(:fn,), Tuple{String}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, IJulia.IJuliaStdio{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.write), IJulia.IJuliaStdio{Base.PipeEndpoint}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Any}, Plots.AnimatedGif, Int64})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Plots.AnimatedGif}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(IJulia.undisplay), Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia.metadata), Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia.display_mimestring), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.AnimatedGif})
precompile(Tuple{typeof(Base._any), getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Array{Base.Multimedia.MIME{mime} where mime, 1}, Base.Colon})
precompile(Tuple{typeof(IJulia.display_mimejson), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia.display_dict), Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.AnimatedGif})
precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base64.Base64EncodePipe}, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base64.Base64EncodePipe}, Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base._show_default), Base.IOContext{Base64.Base64EncodePipe}, Any})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/plain")}, Plots.AnimatedGif})
precompile(Tuple{typeof(Base.sizeof), Plots.AnimatedGif})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.AnimatedGif})
precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia._showable), Array{Base.Multimedia.MIME{mime} where mime, 1}, Plots.AnimatedGif})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("image/jpeg")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("text/markdown")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("text/html")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/markdown")}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/html")}, Plots.AnimatedGif})
precompile(Tuple{typeof(Plots.file_extension), String})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#277#278")){Tuple{}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.AnimatedGif})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base64.Base64EncodePipe}, Base.Multimedia.MIME{Symbol("text/html")}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia.limitstringmime), Base.Multimedia.MIME{Symbol("text/html")}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia.display_mimestring), Base.Multimedia.MIME{Symbol("text/html")}, Plots.AnimatedGif})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, Array{UInt8, 1}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("text/latex")}, Plots.AnimatedGif})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v3+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("application/vnd.vegalite.v2+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v5+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v4+json")}})
precompile(Tuple{getfield(IJulia, Symbol("#26#27")){Plots.AnimatedGif}, Base.Multimedia.MIME{Symbol("application/vnd.vega.v3+json")}})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.dataresource+json")}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia._showable), Base.Multimedia.MIME{Symbol("application/vnd.plotly.v1+json")}, Plots.AnimatedGif})
precompile(Tuple{typeof(IJulia.shutdown_request), ZMQ.Socket, IJulia.Msg})
